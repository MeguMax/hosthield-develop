import React, {useEffect, useState} from "react";
//Components
import Head from "next/head";
import { useRouter } from 'next/router';
import DashboardLayout from "../../../src/components/layout/AdminDashboardLayout";
//Animation
import { motion } from "framer-motion";
//styles
import styled from "styled-components";
import { PUBLIC_API_KEY } from '../../../utils';

export default function AddLawyer() {
  const router = useRouter();
  const [error, setError] = useState('');

  const handleOnSubmit = (event) => {
    event.preventDefault();
    const {target} = event;
    const email = target['0'].name === 'waiver-name' ? target['0'].value: '';

    // send data to BE
    const url = `${PUBLIC_API_KEY}/lawyer/invite`;
    fetch(url, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({email})
    }).then(response => {
          if (response.status !== 200) {
              // user already exists, show error message
              setError('User already exists!');
          } else {
            // response success, redirect to success screen
            router.push("/dashboard/admin/invite-success");
          }
    }).catch(error => {
        console.error(error);
    });
  }

  useEffect(() => {
    // check if user is logged in: if not, redirect to login page
    const userItem = JSON.parse(localStorage.getItem('user'));
    if (!userItem || !userItem.ttl || userItem.ttl < new Date().getTime()) {
      return router.push('/');
    }
  }, [router]);

  return (
    <DashboardLayout>
      <Head>
        <title>Add Lawyer | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledContent className="flex flex-col px-3 md:ml-12 mt-10 mb-20 space-y-9 w-full md:w-11/12 text-site-dark">
        <div className="flex justify-between">
          <h3 className="text-4xl font-semibold">Add New Lawyer</h3>
        </div>
        <hr className="border-site-darkgray border-opacity-30" />
        <div>
          <form className="w-full md:w-8/12 lg:w-4/12" onSubmit={handleOnSubmit}>
            <div className="mt-5">
              <div className="flex space-y-3 flex-col justify-center">
                <label
                  className="text-site-dark text-opacity-75 text-base"
                  htmlFor="waiver-name"
                >
                  Email Address
                </label>
                <input
                  type="text"
                  id="waiver-name"
                  placeholder=""
                  name="waiver-name"
                  required
                  className="bg-input-gray border-gray-100 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-3 px-5 rounded-md"
                />
              </div>
            </div>
            <div className="mt-5">
              <fieldset>
                <div className="flex space-y-1 flex-col justify-center">
                  <button
                    type="submit"
                    className="savesign-button group relative py-4 px-4 border border-transparent bg-site-main text-xs font-medium rounded-md text-white focus:outline-none uppercase tracking-widest"
                  >
                    Send Invite
                  </button>
                </div>
              </fieldset>
            </div>
            {error && (
                  <div className="mt-3 md:px-12">
                      <p className="text-sm text-center text-site-main font-medium tracking-wide">{error}</p>
                  </div>
            )}
          </form>
        </div>
      </StyledContent>
    </DashboardLayout>
  );
}

const StyledContent = styled(motion.section)`
  min-height: calc(100vh - 195px);
  max-height: 100%;
  @media (min-width: 1536px) {
    min-height: calc(100vh - 260px);
  }
`;
