import React, { useState, useEffect } from "react";
//Components
import Head from "next/head";
import { useRouter } from "next/router";
import DashboardLayout from "../../../src/components/layout/AdminDashboardLayout";

//Icons
import { RiEyeLine, RiEyeOffLine } from "react-icons/ri";
//Animation
import { motion } from "framer-motion";
//styles
import styled from "styled-components";
import { PUBLIC_API_KEY } from './../../../utils';

export default function MyAdminProfile() {
  const router = useRouter();
  const [inputPasswordToggle, setInputPasswordToggle] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    username: "",
    password: '',
  });

  const handleOnSubmit = (event) => {
    event.preventDefault();
    const {target} = event;
    const email = target['0'].name === 'email' ? target['0'].value : '';
    const username = target['1'].name === 'username' ? target['1'].value : '';
    const password = target['2'].name === 'password' ? target['2'].value : '';

    const userItem = JSON.parse(localStorage.getItem('user'));

    // send data to BE
    const url = `${PUBLIC_API_KEY}/my-profile/lawyer`;
    fetch(url, {
      method: 'POST',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email,
        username,
        password,
        id: userItem.value.id,
      })
    }).then(response => {
      // update user token
      const updatedUserItem = {
        ttl: userItem.ttl,
        value: {
          ...userItem.value,
          email,
          username,
          password
        }
      };
      localStorage.setItem('user', JSON.stringify(updatedUserItem));
    }).catch(error => console.error(error));
  }

  useEffect(() => {
    // check if user is logged in: if not, redirect to login page
    const userItem = JSON.parse(localStorage.getItem('user'));
    if (!userItem || !userItem.ttl || userItem.ttl < new Date().getTime()) {
      return router.push('/');
    }
    setFormData({
     email: userItem.value.email,
     username: userItem.value.username,
     password: userItem.value.password,
    });
  }, [router]);

  return (
    <DashboardLayout>
      <Head>
        <title>My Profile | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledCreateWaiver className="flex flex-col px-3 md:ml-12 mt-10 mb-10 lg:mb-0 space-y-9 w-full lg:w-2/4 2xl:w-5/12 text-site-dark">
        <div>
          <h3 className="text-4xl font-semibold">My profile</h3>
        </div>
        <div>
          <form
            encType="multipart/form-data"
            className="w-full md:w-7/12 lg:w-10/12 md:ml-1"
            onSubmit={handleOnSubmit}
          >
            <div className="mt-5">
              <div className="flex space-y-3 flex-col justify-center">
                <label
                  className="text-site-dark text-opacity-75 text-base"
                  htmlFor="email"
                >
                  Email Address
                </label>
                <input
                  type="eamil"
                  id="email"
                  placeholder=""
                  name="email"
                  autoComplete="email"
                  required
                  defaultValue={formData.email}
                  className="bg-input-gray border-gray-100 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-3 px-5 rounded-md"
                />
              </div>
            </div>
            <div className="mt-5">
              <div className="flex space-y-3 flex-col justify-center">
                <label
                  className="text-site-dark text-opacity-75 text-base"
                  htmlFor="username"
                >
                  Username
                </label>
                <input
                  type="text"
                  id="username"
                  placeholder=""
                  name="username"
                  required
                  defaultValue={formData.username}
                  className="bg-input-gray border-gray-100 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-3 px-5 rounded-md"
                />
              </div>
            </div>
            <div className="mt-5">
              <div className="flex space-y-3 flex-col justify-center">
                <label
                  className="text-site-dark text-opacity-75 text-base"
                  htmlFor="password"
                >
                  Password
                </label>
                <div className="flex w-full items-center relative">
                  <input
                    type={`${inputPasswordToggle ? "text" : "password"}`}
                    id="password"
                    placeholder=""
                    name="password"
                    required
                    defaultValue={formData.password}
                    className="w-full bg-input-gray border-gray-100 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-3 pl-5 pr-8 rounded-md"
                  />
                  {inputPasswordToggle && (
                    <RiEyeOffLine
                      className="absolute cursor-pointer text-site-darkgray  top-4 right-2 text-xl"
                      onClick={() =>
                        setInputPasswordToggle(!inputPasswordToggle)
                      }
                    />
                  )}

                  {inputPasswordToggle == false && (
                    <RiEyeLine
                      className="absolute cursor-pointer text-site-darkgray  top-4 right-2 text-xl"
                      onClick={() =>
                        setInputPasswordToggle(!inputPasswordToggle)
                      }
                    />
                  )}
                </div>
              </div>
            </div>
            <div className="mt-12">
              <fieldset>
                <div className="flex space-y-1 flex-col justify-center">
                  <button
                    type="submit"
                    className="savesign-button group relative py-4 px-4 border border-transparent bg-site-main text-sm font-medium rounded-md text-white focus:outline-none uppercase tracking-widest"
                  >
                    Save
                  </button>
                </div>
              </fieldset>
            </div>
          </form>
        </div>
      </StyledCreateWaiver>
    </DashboardLayout>
  );
}

const StyledCreateWaiver = styled(motion.section)`
  height: calc(100vh - 25.4vh);
`;
