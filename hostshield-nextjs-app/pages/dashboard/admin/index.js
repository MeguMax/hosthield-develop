import React, { Fragment, useState, useEffect } from "react";
//Components
import Head from "next/head";
import Link from "next/link";
import { useRouter } from 'next/router';
import Image from "next/image";
import DashboardLayout from "../../../src/components/layout/AdminDashboardLayout";
import { Listbox, Transition } from "@headlessui/react";
//Icons
import { CheckIcon, ChevronDownIcon } from "@heroicons/react/solid";
import { FiPlus, FiSearch } from "react-icons/fi";
//Animation
import { motion } from "framer-motion";
//styles
import styled from "styled-components";
import { PUBLIC_API_KEY } from '../../../utils';

const SORT_OPTIONS = [
  { id: 1, name: "Newest" },
  { id: 2, name: "Oldest" },
];

export default function WaiverRequest() {
  const router = useRouter();
  const [selected, setSelected] = useState(SORT_OPTIONS[0]);

  const [people, setPeople] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  const handleSearch = event => {
    setSearchTerm(event.target.value);
  }

  useEffect(() => {
    // check if user is logged in: if not, redirect to login page
    const userItem = JSON.parse(localStorage.getItem('user'));
    if (!userItem || !userItem.ttl || userItem.ttl < new Date().getTime()) {
      return router.push('/');
    }

    // get people
    const url = `${PUBLIC_API_KEY}/superadmin/lawyers`;
    fetch(url, {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      },
    }).then(response => {
      // handle response
      response.json().then(data => {
        const lawyers = Array.isArray(data) ? data : [];
        // set people
        setPeople(lawyers.map(lawyer => ({
          ...lawyer,
          id: lawyer.id,
          // fullname: `${lawyer?.first_name || ''} ${lawyer?.last_name || ''}`,
          image: "https://images.unsplash.com/photo-1570295999919-56ceb5ecca61?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=4&w=256&h=256&q=60",
        })));
      })
    }).catch(error => console.error(error));
  }, [router]);

  return (
    <DashboardLayout>
      <Head>
        <title>Dashboard | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledContent className="flex flex-col px-3 md:ml-12 mt-10 mb-20 space-y-9 w-full md:w-11/12 text-site-dark">
        <div className="flex flex-col space-y-3 md:space-y-0 md:flex-row md:justify-between">
          <h3 className="text-4xl font-semibold">Managers</h3>
          <Link href="/dashboard/admin/add-lawyer">
            <a className="bg-site-main text-white uppercase text-base flex space-x-1 justify-center items-center rounded-md py-2 px-3">
              <FiPlus className="text-base text-white font-medium" />
              <span className="text-xs font-medium tracking-widest">
                Add New Manager
              </span>
            </a>
          </Link>
        </div>
        <hr className="border-site-darkgray border-opacity-30" />
        <div className="flex flex-col md:flex-row space-y-3 md:space-y-0 md:justify-between">
          <div>
            <form className="w-full">
              <div className="flex w-full items-center relative">
                <input
                  type="text"
                  className="bg-input-gray w-full md:w-auto border-gray-100 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-3 pl-5 pr-9 rounded-md placeholder-site-darkgray tracking-wide placeholder-opacity-70"
                  placeholder="Search..."
                  onChange={handleSearch}
                />
                <FiSearch className="absolute right-3 text-site-dark text-opacity-50 text-xl" />
              </div>
            </form>
          </div>
          <div className="w-full md:w-2/4 xl:w-1/4 flex sm:justify-end items-center space-x-2">
            <label className="sm:text-right w-1/4 xl:w-1/4 uppercase text-sm text-site-dark text-opacity-50">
              Sort By:
            </label>
            <Listbox className="w-3/4" value={selected} onChange={setSelected}>
              {({ open }) => (
                <>
                  <div className="mt-1 w-3/4 sm:w-32 md:w-5/12 relative">
                    <Listbox.Button className="bg-transparent relative w-full border border-gray-200 rounded-md pl-3 pr-10 py-2 md:py-3 text-left cursor-default focus:outline-none focus:ring-0 tracking-wide text-sm">
                      <span className="block truncate">{selected.name}</span>
                      <span className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                        <ChevronDownIcon
                          className="h-5 w-5 text-gray-400"
                          aria-hidden="true"
                        />
                      </span>
                    </Listbox.Button>

                    <Transition
                      show={open}
                      as={Fragment}
                      leave="transition ease-in duration-100"
                      leaveFrom="opacity-100"
                      leaveTo="opacity-0"
                    >
                      <Listbox.Options
                        static
                        className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none text-sm"
                      >
                        {SORT_OPTIONS.map((option) => (
                          <Listbox.Option
                            key={option.id}
                            className={({ active }) =>
                              classNames(
                                active
                                  ? "text-white bg-site-main"
                                  : "text-gray-900",
                                "cursor-default select-none relative py-2 pl-3 pr-9"
                              )
                            }
                            value={option}
                          >
                            {({ selected, active }) => (
                              <>
                                <span
                                  className={classNames(
                                    selected ? "font-semibold" : "font-normal",
                                    "block truncate"
                                  )}
                                >
                                  {option.name}
                                </span>

                                {selected ? (
                                  <span
                                    className={classNames(
                                      active ? "text-white" : "text-site-dark",
                                      "absolute inset-y-0 right-0 flex items-center pr-4"
                                    )}
                                  >
                                    <CheckIcon
                                      className="h-5 w-5"
                                      aria-hidden="true"
                                    />
                                  </span>
                                ) : null}
                              </>
                            )}
                          </Listbox.Option>
                        ))}
                      </Listbox.Options>
                    </Transition>
                  </div>
                </>
              )}
            </Listbox>
          </div>
        </div>
        <div className="flex flex-col space-y-4 overflow-x-scroll">
          <div className="flex w-max lg:w-full justify-start space-x-3 px-2.5">
            <div className="w-64 md:w-72 lg:w-4/12">
              <span className="text-sm uppercase ml-16 text-site-dark tracking-wide font-medium">
                Email Address
              </span>
            </div>
            <div className="w-32 lg:w-2/12 flex items-center">
              <span className="text-sm uppercase -ml-1 text-site-dark tracking-wide font-medium">
                Username
              </span>
            </div>
            {/* <div className="w-32 lg:w-3/12">
              <span className="text-sm uppercase text-site-dark tracking-wide font-medium">
                Full Name
              </span>
            </div> */}
            <div className="w-32 lg:w-2/12">
              <span className="sr-only">View Profile</span>
            </div>
          </div>
          {people.filter(people => {
            if (searchTerm) {
              // search by email
              return people?.email ? people.email.startsWith(searchTerm) : false;
            }
            return true;
          }).map((people) => (
            <StyledDataRow
              key={people.id}
              className="flex w-max lg:w-full justify-items-start space-x-3 rounded-md shadow-md bg-white pl-2 pr-4 py-0"
            >
              <div className="w-64 md:w-72 lg:w-4/12 flex space-x-5 items-center overflow-x-hidden">
                <div className="flex-shrink-0 flex items-center h-12 w-12">
                  <Image
                    className="rounded-full h-12 w-12"
                    src={people.image}
                    alt="image"
                    width="40"
                    height="40"
                  />
                </div>
                <span className="text-sm break-all md:break-words text-site-darkergray">
                  {people.email}
                </span>
              </div>
              <div className="w-32 lg:w-2/12 flex items-center">
                <span className="text-sm text-site-darkergray tracking-wide">
                  {people.username}
                </span>
              </div>
              {/* <div className="w-32 lg:w-3/12 flex items-center">
                <span className="text-sm text-site-darkergray tracking-wide">
                  {people.fullname}
                </span>
              </div> */}
              <div className="w-32 lg:w-2/12 flex items-center">
                <Link href={`/dashboard/admin/waiver-profile?username=${people.username}`}>
                  <a className="w-full inline-block text-sm font-medium text-right text-site-main tracking-wide capitalize">
                    View Profile
                  </a>
                </Link>
              </div>
            </StyledDataRow>
          ))}
        </div>
      </StyledContent>
    </DashboardLayout>
  );
}

const StyledContent = styled(motion.section)`
  min-height: calc(100vh - 194px);
  @media (min-width: 1536px) {
    margin-bottom: 10rem;
  }
`;
const StyledDataRow = styled.div`
  box-shadow: 0 10px 90px 0 rgba(49, 49, 49, 0.05);
`;
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}
