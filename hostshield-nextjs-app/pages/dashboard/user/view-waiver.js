import React, { Fragment, useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  setShareModalIsOpen,
  setShareModalLink,
} from "../../../redux/actions/main";
//Components
import Head from "next/head";
import Link from "next/link";
import { useRouter } from 'next/router';
import DashboardLayout from "../../../src/components/layout/DashboardLayout";
import { Listbox, Transition } from "@headlessui/react";
import {
  StyledSignedSymbol,
  StyledOutForSignatureSymbol,
} from "../../../src/components/status";
//Icons
import { RiEyeLine, RiShareForwardFill } from "react-icons/ri";
import { AiOutlineEdit } from "react-icons/ai";
import { ChevronDownIcon, CheckIcon } from "@heroicons/react/solid";
//Animation
import { motion } from "framer-motion";
//styles
import styled from "styled-components";
import { PUBLIC_API_KEY } from "../../../utils";

const SIGNED_STATUS = "signed";

const STATUS_OPTIONS = [
  { id: 1, name: "Status" },
  { id: 2, name: "Signed" },
  { id: 3, name: "Out for Signature" },
];

export default function ViewWaiver() {
  const dispatch = useDispatch();
  const { shareModal } = useSelector((state) => state);
  const [selected, setSelected] = useState(STATUS_OPTIONS[0]);
  const [people, setPeople] = useState([]);
  const [property, setProperty] = useState('');
  const [status, setStatus] = useState('');

  const router = useRouter();

  useEffect(() => {
    // check if user is logged in: if not, redirect to login page
    const userItem = JSON.parse(localStorage.getItem('user'));
    if (!userItem || !userItem.ttl || userItem.ttl < new Date().getTime()) {
      return router.push('/');
    }

    if (router.query.propertyName) {
      setProperty(router.query.propertyName || '');
    }
    if (router.query.status) {
      setStatus(router.query.status || '');
    }
    if (router.query.waiverId) {
        // get requests
        const url = `${PUBLIC_API_KEY}/waiver?id=${router.query.waiverId}`;
        fetch(url, {
          method: 'GET',
          credentials: 'include',
          headers: {
            'Content-Type': 'application/json'
          },
        }).then(response => {
          response.json().then(data => {
            // handle response
            console.log(data);
            setPeople(data);
          })
        }).catch(error => console.error(error));
        }
  }, [router]);

  const openContract = (email, id) => {
    router.push(`/dashboard/user/view-contract?email=${email}&id=${id}&property=${property}`);
  }

  return (
    <DashboardLayout>
      <Head>
        <title>View Waiver | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <StyledMyWaiver className="flex flex-col md:ml-12 mt-10 mb-20 space-y-9 px-3 w-full md:w-11/12 text-site-dark">
        <div className="flex flex-col lg:flex-row space-y-3 lg:space-y-0 lg:justify-between">
          <h3 className="text-4xl font-semibold">{property}</h3>
          <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-4 lg:justify-center sm:items-center">
            <Link href={`/dashboard/user/waiver-request?id=${router?.query?.waiverId || ''}`}>
              <a className="bg-transparent text-site-main uppercase text-base flex space-x-1 justify-center items-center rounded-md py-3 px-3">
                <RiEyeLine className="text-base font-semibold" />
                <span className="text-xs font-semibold tracking-widest">
                  View Waiver
                </span>
              </a>
            </Link>
            <Link href="/dashboard">
              <a className=" text-site-darkgray text-opacity-80 uppercase text-base flex space-x-2 justify-center items-center border border-site-darkgray border-opacity-80 rounded-md py-3 px-3">
                <AiOutlineEdit className="text-base  font-medium" />
                <span className="text-xs font-medium tracking-widest">
                  Request Edit
                </span>
              </a>
            </Link>
            <Link href="#">
              <a
                className={status === 'approved'
                ? "bg-site-main text-white uppercase text-base flex space-x-1 justify-center items-center rounded-md py-3 px-3"
                : "bg-input-gray border-gray-100 uppercase text-base flex space-x-1 justify-center items-center rounded-md py-3 px-3"}
                onClick={() => {
                  if (status === 'approved') {
                    dispatch(setShareModalLink( `https://app.shieldmyrental.com/guest-sign-waiver?id=${router?.query?.waiverId || ''}&booking=${router?.query?.bookingId}`));
                    dispatch(setShareModalIsOpen(!shareModal.isOpen));
                  }
                }}
              >
                <RiShareForwardFill className="text-base font-medium" />
                <span className="text-xs font-medium tracking-widest">
                  Send Waiver
                </span>
              </a>
            </Link>
          </div>
        </div>
        <hr className="border-site-darkgray border-opacity-30" />
        {/* <div className="flex sm:justify-end">
          <div className="w-full md:w-2/4 xl:w-1/4 flex justify-end items-center space-x-2">
            <label className="sm:text-right w-1/4 sm:w-1/4 xl:w-1/4 uppercase text-sm text-site-dark text-opacity-50">
              Sort By:
            </label>
            <Listbox className="w-3/4" value={selected} onChange={setSelected}>
              {({ open }) => (
                <>
                  <div className="mt-1 w-3/4 sm:w-1/4 md:w-5/12 relative">
                    <Listbox.Button className="bg-transparent relative w-full border border-gray-200 rounded-md pl-3 pr-10 py-2 md:py-3 text-left cursor-default focus:outline-none focus:ring-0 tracking-wide text-sm sm:text-sm">
                      <span className="block truncate">{selected.name}</span>
                      <span className="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
                        <ChevronDownIcon
                          className="h-5 w-5 text-gray-400"
                          aria-hidden="true"
                        />
                      </span>
                    </Listbox.Button>

                    <Transition
                      show={open}
                      as={Fragment}
                      leave="transition ease-in duration-100"
                      leaveFrom="opacity-100"
                      leaveTo="opacity-0"
                    >
                      <Listbox.Options
                        static
                        className="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none text-sm sm:text-sm"
                      >
                        {STATUS_OPTIONS.map((option) => (
                          <Listbox.Option
                            key={option.id}
                            className={({ active }) =>
                              classNames(
                                active
                                  ? "text-white bg-site-main"
                                  : "text-gray-900",
                                "cursor-default select-none relative py-2 pl-3 pr-9 text-sm lg:text-base"
                              )
                            }
                            value={option}
                          >
                            {({ selected, active }) => (
                              <>
                                <span
                                  className={classNames(
                                    selected ? "font-semibold" : "font-normal",
                                    "block truncate text-sm lg:text-base"
                                  )}
                                >
                                  {option.name}
                                </span>

                                {selected ? (
                                  <span
                                    className={classNames(
                                      active ? "text-white" : "text-site-dark",
                                      "absolute inset-y-0 right-0 flex items-center pr-4 text-sm lg:text-base"
                                    )}
                                  >
                                    <CheckIcon
                                      className="h-5 w-5"
                                      aria-hidden="true"
                                    />
                                  </span>
                                ) : null}
                              </>
                            )}
                          </Listbox.Option>
                        ))}
                      </Listbox.Options>
                    </Transition>
                  </div>
                </>
              )}
            </Listbox>
          </div>
        </div> */}
        <div className="flex flex-col space-y-4 w-full overflow-x-scroll">
          <div className="flex justify-start space-x-3 px-5 w-max sm:w-full">
            <div className="w-96 sm:w-4/12 lg:w-3/12">
              <span className="uppercase text-site-dark tracking-wide font-medium">
                Email Address
              </span>
            </div>
            <div className="w-48 sm:w-3/12 lg:w-2/12">
              <span className="uppercase text-site-dark tracking-wide font-medium">
                Status
              </span>
            </div>
            <div className="w-32 sm:w-3/12 lg:w-2/12">
              <span className="uppercase text-site-dark tracking-wide font-medium">
                Date
              </span>
            </div>
            <div className="w-32 sm:w-2/12 lg:w-2/12">
              <span className="uppercase text-site-dark tracking-wide font-medium">
          
              </span>
            </div>
          </div>
          {people.map((people) => (
            <StyledDataRow
              key={people._id}
              className="flex w-max sm:w-full justify-items-start space-x-3 rounded-md shadow-md bg-white px-5 py-4"
            >
              <div className="w-96 sm:w-4/12 lg:w-3/12">
                <span className="text-sm break-words text-site-darkergray tracking-wide">
                  {people.email}
                </span>
              </div>
              <div className="w-48 sm:w-3/12 lg:w-2/12">
                <span
                  className={`text-sm ${
                    people.status.toLowerCase() === SIGNED_STATUS.toLowerCase()
                      ? "text-site-green"
                      : "text-site-brown"
                  } tracking-wide`}
                >
                  {people.status.toLowerCase() === SIGNED_STATUS.toLowerCase() ? (
                    <StyledSignedSymbol />
                  ) : (
                    <StyledOutForSignatureSymbol />
                  )}
                  {people.status}
                </span>
              </div>
              <div className="w-32 sm:w-3/12 lg:w-2/12">
                <span className="text-site-darkergray tracking-wide capitalize">
                  {people.time}
                </span>
              </div>
              <div className="w-32 sm:w-2/12 lg:w-2/12 flex items-center cursor-pointer" onClick={() => openContract(people.email, people.id)}>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" className="bi bi-eye" viewBox="0 0 16 16">
                  <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z"/>
                  <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
                </svg>
              </div>
            </StyledDataRow>
          ))}
        </div>
      </StyledMyWaiver>
    </DashboardLayout>
  );
}

const StyledMyWaiver = styled(motion.section)`
  height: minmax(70vh, 90vh);
  @media (min-width: 1536px) {
    margin-bottom: 10rem;
  }
`;
const StyledDataRow = styled.div`
  box-shadow: 0 10px 90px 0 rgba(49, 49, 49, 0.05);
`;
function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}
