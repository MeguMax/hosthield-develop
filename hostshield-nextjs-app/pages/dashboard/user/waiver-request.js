import React, {useEffect, useState} from "react";
//Components
import Head from "next/head";
import { useRouter } from 'next/router';
import DashboardLayout from "../../../src/components/layout/DashboardLayout";
//Icons
import { RiMapPinLine } from "react-icons/ri";
//Animation
import { motion } from "framer-motion";
//styles
import styled from "styled-components";
import { PUBLIC_API_KEY } from "../../../utils";
import { Document, Page, pdfjs } from "react-pdf";
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;

export default function WaiverApproveRequest() {
  const router = useRouter();
  const [requestData, setRequestData] = useState({
    appliancesList: [],
    waiverName: "",
    streetAddress: "",
    city: "",
    llcName: "",
    accessToProperty: "",
    zipCode: "",
    state: "",
    phoneNumber: "",
    owner: "",
    manager: "",
    listingLink: "",
    smokeDetectors: "",
    propertyCondition: "",
    propertyType: "",
    forRenovation: "",
    bunkBeds: "",
    stairs: "",
    permitPets: "",
    issuesWithGuests: "",
    handRailings: "",
    stairsLighting: "",
    pool: "",
    repairOrRenovation: "",
    depthMarkers: "",
    hotTub: "",
    balcony: "",
    doorBellOrSecurity: "",
    user: "",
    id: "",
    status: "",
  });


  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [blobPDF, setBlobPDF] = useState(null);
  const pdfPages = [];
  const [isLoading,setIsLoading] = useState(true);

  function onDocumentLoadSuccess({ numPages }) {
    setNumPages(numPages);
    setIsLoading(false);
  }

  useEffect(() => {
    // check if user is logged in: if not, redirect to login page
    const userItem = JSON.parse(localStorage.getItem('user'));
    if (!userItem || !userItem.ttl || userItem.ttl < new Date().getTime()) {
      return router.push('/');
    }
    if (router.query.id) {
      // get requests
      const url = `${PUBLIC_API_KEY}/request?id=${router.query.id}`;
      fetch(url, {
        method: 'GET',
        credentials: 'include',
        headers: {
          'Content-Type': 'application/json'
        },
      }).then(response => {
        response.json().then(data => {
          // handle response
          console.log(data.appliancesList);
          if (typeof(data.appliancesList) == 'string') {
            data.appliancesList = data.appliancesList.split(',');
            setRequestData(data);
          } else {
            setRequestData(data);
          }
        });
      }).catch(error => console.error(error));
    }
    if (router?.query?.id) {
      fetch(`${PUBLIC_API_KEY}/documents/empty?id=${router.query.id}`, {
        method: "GET",
        credentials: 'include',
      }).then((response) => {
        // response.arrayBuffer().then(data => {
        //   console.log(data);
        // });
        response.blob().then((data) => {
          console.log("Document loaded")
          setBlobPDF(data);
          data.text().then((text) => {
            console.log(text);
          });
        });
        // response.text().then(text => {
        //   console.log(text);
        // });
      });
    }
 }, [router]);

  return (
    <DashboardLayout>
      <Head>
        <title>Request | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <StyledRequestWaiver className="flex flex-col px-3 md:ml-12 mt-10 mb-20 space-y-9 w-full md:w-11/12 text-site-dark">
        <div className="flex flex-col space-y-2">
          <h3 className="text-4xl font-semibold">{requestData.waiverName}</h3>
          <div className="flex items-center space-x-1">
            <RiMapPinLine className="text-xl text-site-dark text-opacity-75" />
            <span className=" font-light text-site-dark text-opacity-75">
            {requestData.streetAddress +
              ", " +
              requestData.city +
              ", " +
              requestData.state +
              ", " +
              requestData.zipCode}
            </span>
          </div>
        </div>
        <hr className="border-site-darkgray border-opacity-30" />
        <div className="flex flex-col mt-10 w-10/12 2xl:w-6/12 space-y-10 mx-auto ">
        {isLoading ? (
          <div className="flex justify-center py-4 px-4 border border-transparent bg-site-main text-sm font-medium rounded-md text-white focus:outline-none uppercase tracking-widest">
            <StyledLoadingSpinner>
              <div></div>
              <div></div>
              <div></div>
              <div></div>
            </StyledLoadingSpinner>
          </div>
        ):(
          <></>
        )}
          <StyledContainer className="">
            <StyledContent className="relative flex flex-col bg-white px-6 py-3 space-y-4">
              {blobPDF && (
                <StyledCanvasParent>
                  <Document
                    file={blobPDF}
                    onLoadSuccess={onDocumentLoadSuccess}
                  >
                    {Array.apply(null, Array(numPages))
                      .map((x, i) => i + 1)
                      .map((pageNumber) => (
                        <Page pageNumber={pageNumber} key={pageNumber}/>
                      ))}
                  </Document>
                </StyledCanvasParent>
              )}
            </StyledContent>
          </StyledContainer>
        </div>
        <div className="flex flex-col space-y-9">
          <StyledGridLayout className="grid bg-white rounded-md shadow-lg px-5 md:px-16 py-7">
            <div className="flex flex-col space-y-4">
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Link to a listing
                </label>
                <a
                  className="text-site-main font-semibold"
                  target="_blank"
                  rel="noreferrer"
                  href={requestData.listingLink}
                >
                  {requestData.listingLink}
                </a>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Type of property
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.propertyType}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Full name of property owner
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.owner}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Full name of property manager
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.manager}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Does your listing have bunk beds?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.bunkBeds ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Does your listing have stairs?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.stairs ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Does your listing permit pets?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.permitPets ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Appliances list
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.appliancesList.map((i)=>{return i+" "})}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Have you had any issues with guests at your property?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.issuesWithGuests ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Contact phone number
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.phoneNumber}
                </span>
              </div>
            </div>
            <div className="flex flex-col mt-3 md:mt-auto space-y-4">
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Does your listing have a hot tub?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.hotTub ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Does your listing have a balcony?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.balcony ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Number of smoke detectors
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.smokeDetectors}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Do stairs have handrailing’s?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.handRailings ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Stairs have lighting?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.stairsLighting ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Does your listing have a pool?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.pool ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Any areas or parts on your property in need of repair or
                  renovation?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.repairOrRenovation ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Do you have depth markers?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.depthMarkers ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Does listing have ring doorbell or security system?
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.doorBellOrSecurity ? "Yes" : "No"}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Potentially dangerous or hazardous condition on the property
                  list
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.propertyCondition}
                </span>
              </div>
              <div className="flex flex-col space-y-1">
                <label className="text-sm text-site-dark text-opacity-60">
                  Renovations on property
                </label>
                <span className="text-site-dark font-semibold">
                  {requestData.forRenovation == "" ? "None" : requestData.forRenovation}
                </span>
              </div>
            </div>
          </StyledGridLayout>
        </div>
      </StyledRequestWaiver>
    </DashboardLayout>
  );
}

const StyledRequestWaiver = styled(motion.section)`
  height: minmax(70vh, 90vh);
  @media (min-width: 1536px) {
    margin-bottom: 10rem;
  }
`;
const StyledGridLayout = styled.div`
  grid-template-columns: minmax(280px, 0.5fr) minmax(280px, 1fr);
  @media screen and (max-width: 639px) {
    grid-template-columns: minmax(280px, 1fr);
  }
`;
const StyledContainer = styled.div`
  .fade-in-section {
    opacity: 0;
    visibility: hidden;
    transition: opacity 2s ease;
    will-change: opacity;
  }
  .fade-in-section.is-visible {
    opacity: 1;
    transform: none;
    visibility: visible;
  }
`;

const StyledCanvasParent = styled.div`
  user-select: none;
  > div > div > canvas {
    margin: 0 auto;
  }
`;
const StyledContent = styled(motion.div)`
  box-shadow: 10px 0 90px 0 rgba(0, 0, 0, 0.05);
  max-height: calc(100vh - 150px);
  overflow-y: scroll;
  & > div {
    h4 {
      font-weight: 500;
    }
    p {
      font-weight: 300;
      color: #8a8a8a;
    }
  }
`;
const StyledLoadingSpinner = styled.div`
  display: inline-block;
  position: relative;
  height: 20px;
  width: 76px;

  div {
    position: absolute;
    top: 3.5px;
    width: 13px;
    height: 13px;
    border-radius: 50%;
    background: #fff;
    animation-timing-function: cubic-bezier(0, 1, 1, 0);
  }
  div:nth-child(1) {
    left: 8px;
    animation: lds-ellipsis1 0.6s infinite;
  }
  div:nth-child(2) {
    left: 8px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(3) {
    left: 32px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(4) {
    left: 56px;
    animation: lds-ellipsis3 0.6s infinite;
  }
  @keyframes lds-ellipsis1 {
    0% {
      transform: scale(0);
    }
    100% {
      transform: scale(1);
    }
  }
  @keyframes lds-ellipsis3 {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(0);
    }
  }
  @keyframes lds-ellipsis2 {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(24px, 0);
    }
  }
`;
