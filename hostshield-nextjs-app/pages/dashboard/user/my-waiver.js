import React, {useEffect, useState} from "react";
import ReactTooltip from 'react-tooltip';
import { useDispatch, useSelector } from "react-redux";
import {
  setWarningPaymentModalIsOpen,
  setShareModalIsOpen,
  setShareModalLink,
} from "../../../redux/actions/main";
//Components
import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import DashboardLayout from "../../../src/components/layout/DashboardLayout";
import ToolTip from "../../../src/components/tooltip";
//Icons
import { RiMapPinLine, RiEyeLine, RiShareForwardFill } from "react-icons/ri";
import { FiPlus } from "react-icons/fi";
//Animation
import { motion } from "framer-motion";
//styles
import styled from "styled-components";
import { PUBLIC_API_KEY } from "../../../utils";

export default function MyWaiver() {
  const dispatch = useDispatch();
  const { shareModal, warningPaymentModal } = useSelector((state) => state);
  const [properties, setProperties] = useState([]);
  const [available, setAvailable] = useState(0);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  const handleModal = () => {
    dispatch(setWarningPaymentModalIsOpen(!warningPaymentModal.isOpen));
  }


  useEffect(() => {
    // check if user is logged in: if not, redirect to login page
    const userItem = JSON.parse(localStorage.getItem('user'));
      if (!userItem || !userItem.ttl || userItem.ttl < new Date().getTime()) {
        return router.push('/');
    }
    // get properties
    const url = `${PUBLIC_API_KEY}/my-waivers?username=${userItem.value.username}`;
    fetch(url, {
      method: 'GET',
      credentials: 'include',
      headers: {
        'Content-Type': 'application/json'
      },
    }).then(response => {
      response.json().then(data => {
        // if properties: set state, else redirect to create-waiver screen
        if (!data.length) {
          return router.replace('/dashboard/');
        }
        setProperties(data);
        setAvailable(userItem.value.quantity - userItem.value.waivers);
        setIsLoading(false);
        let tooltip = document.querySelectorAll(`[data-tip][data-for=tooltip-share]`)[0]
        ReactTooltip.show(tooltip)
      });
    }).catch(error => console.error(error));
  }, [router]);

  return (
    <DashboardLayout>
      <Head>
        <title>My Waiver | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {isLoading ?
        (
          <></>
        ):(
          <StyledMyWaiver className="flex flex-col px-3 md:px-auto md:ml-12 mt-10 mb-20 space-y-9 md:w-11/12 text-site-dark">
        <div className="flex flex-col sm:flex-row justify-center space-y-3 sm:space-y-0 sm:justify-between">
          <h3 className="text-3xl lg:text-4xl font-semibold">My Waivers</h3>
          {available!=0 ?
            (
              <Link href="/dashboard/user/create-waiver">
                <a className="bg-site-main text-white uppercase text-base flex space-x-1 justify-center items-center rounded-md py-2 px-3">
                  <FiPlus className="text-base text-white font-medium" />
                  <span className="text-xs font-medium tracking-widest">
                    Add New Waiver
                  </span>
                </a>
              </Link>
            ):(
              <div onClick={handleModal}>
                <a className="bg-site-main text-white uppercase text-base flex space-x-1 justify-center items-center rounded-md py-2 px-3">
                  <FiPlus className="text-base text-white font-medium" />
                  <span className="text-xs font-medium tracking-widest">
                    Add New Waiver
                  </span>
                </a>
              </div>
            )}
        </div>
        <StyledGridLayout className="grid gap-7">
          {properties.map((item) => (
            <StyledCard
              key={item.id}
              className="rounded-lg flex flex-col  justify-center shadow-lg"
            >
              <div className="pt-3 pb-1 px-2">
                <h4 className="text-lg text-center font-semibold">
                  {item.waiverName}
                </h4>
                <span className="uppercase text-site-dark text-opacity-80 w-full inline-block text-xs text-center font-normal">
                  {item.propertyType}
                </span>
              </div>
              <div className="flex justify-center items-center space-x-1 pt-2 px-2">
                <RiMapPinLine className="text-base text-site-dark text-opacity-50" />
                <span className="text-site-dark text-sm inline-block mt-0.5 text-opacity-50 ">
                {item.streetAddress +
                  ", " +
                  item.city +
                  ", " +
                  item.state +
                  ", " +
                  item.zipCode}
                </span>
              </div>
              {item.status.status == 'pending' && (
                <div className="flex justify-center items-center space-x-1 pt-2 px-2">
                  <span className=" text-site-main w-full inline-block text-xs text-center font-bold">
                    Waiting for approval!
                  </span>
                </div>
              )}
              {item.status.status == 'disabled' && (
                <div className="flex justify-center items-center space-x-1 pt-2 px-2">
                  <span className=" text-site-main w-full inline-block text-xs text-center font-bold">
                    Disabled waiver
                  </span>
                </div>
              )}
              <div className="flex relative justify-evenly items-center border-t-2 divide-x divide-site-darkgray divide-opacity-40 border-gray-100 mt-4">
                <div className="w-2/4 flex py-2 justify-center items-center relative">
                  <ToolTip
                    className="cursor-pointer"
                    text="view waiver"
                    classNames="-top-9"
                  >
                    <Link href={`/dashboard/user/waiver-bookings?waiverId=${item.id}&username=${userItem.value.username}`}>
                      <a className="cursor-pointer">
                        <RiEyeLine className="text-xl text-site-dark text-opacity-50" />
                      </a>
                    </Link>
                  </ToolTip>
                </div>
              </div>
            </StyledCard>
          ))}
        </StyledGridLayout>
        <ReactTooltip id="tooltip-share" place="bottom" effect="solid" type="error" />
          </StyledMyWaiver>
        )}
    </DashboardLayout>
  );
}

const StyledMyWaiver = styled(motion.section)`
  height: minmax(70vh, 90vh);
  @media (min-width: 1536px) {
    margin-bottom: 10rem;
  }
`;
const StyledCard = styled(motion.div)`
  box-shadow: 0 10px 90px 0 rgba(49, 49, 49, 0.1);
`;
const StyledGridLayout = styled.div`
  grid-template-columns: repeat(auto-fit, minmax(270px, 1fr));
  & > div {
    background-color: #fff;
    width: minmax(320px, 1fr);
  }
`;
