import { useState } from "react";
import Head from "next/head";
import Link from "next/link";
import { useRouter } from 'next/router';
import {connect} from 'react-redux';
//Components
import TagInput from "../src/components/input/input-tag";
//Icons
import { MdKeyboardArrowLeft } from "react-icons/md";
import { RiCalendar2Line } from "react-icons/ri";
//Logo
import Logo from "../src/components/header/logo";
//Backgrounds
import TransparentShieldBg from "../src/components/background/transparent-hostshield-bg";

import styled from "styled-components";
//Animations
import { motion } from "framer-motion";
import { pageAnimation } from "../src/components/animation/index";
import * as actionTypes from '../redux/types';
import { PUBLIC_API_KEY } from '../utils';

function SignUp(props) {
  const [tagData, setTagData] = useState([]);
  const router = useRouter();
  const [validationErrors, setValidationErrors] = useState([]);
  const [llcName, setLlcName] = useState('');
  const [hasLLC, setHasLLC] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleOnSubmit = (event) => {
    event.preventDefault();
    const {target} = event;
    const {form} = target;
    const email = form['1'].name === 'email' ? form['1'].value: '';
    const username = form['2'].name === 'username' ? form['2'].value : '';
    const firstName = form['3'].name === 'firstName' ? form['3'].value : '';
    const lastName = form['4'].name === 'lastName' ? form['4'].value : '';
    const password = form['5'].name === 'password' ? form['5'].value : '';
    const repeatPassword = form['6'].name === 'confirm_password' ? form['6'].value : '';
    //const properties = form['5'].name === 'properties' ? form['5'].value : '';
    //const propertiesOwned = form['7'].name === 'properties_owned' ? form['7'].checked : false;
    const propertyAccess = tagData;

    // password validation
    if (password !== repeatPassword) {
      const updatedErrors = [...validationErrors];
      updatedErrors.push('You must enter same password twice!');
      setValidationErrors(updatedErrors);
      return;
    }
    if (email == '' || username == '' || password == '' ){
      const updatedErrors = [...validationErrors];
      updatedErrors.push('You must fill every field!');
      setValidationErrors(updatedErrors);
      return;
    }
    // send data to BE
    const url = `${PUBLIC_API_KEY}/signup`;
    setIsLoading(true);
    fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email,
        username,
        firstName,
        lastName,
        password,
        role: 'user',
      })
    }).then(response => {
      if (response.status === 200) {
        // handle response: store user data
        response.json().then(data => {
          const userData = data?.user?.id ? data.user : {};
          props.storeUser({
            userData,
          });
          // persistense data: store user into localstorage
          const itemData = {
            value: userData,
            ttl: new Date().getTime() + 10800000, // set ttl to 3h by default
          }
          localStorage.setItem('user', JSON.stringify(itemData));
          setIsLoading(false);
          // redirect to dashboard
          if (router.query.coupon) {
            router.push("/signup-payment?coupon="+router.query.coupon);
          } else {
            router.push("/signup-payment");
          }

        });
      } else {
        response.json().then(data => {
          setIsLoading(false);
          const updatedErrors = [...validationErrors];
          updatedErrors.push(data.message);
          setValidationErrors(updatedErrors);
        });
      }
    }).catch(error => {
      console.error(error);
      setIsLoading(false);
      const updatedErrors = [...validationErrors];
      updatedErrors.push(error.message);
      setValidationErrors(updatedErrors);
    });
  }

  const scheduleAppointmentHandler = () => {
    Calendly.initPopupWidget({url: "https://calendly.com/hostshield/15?hide_event_type_details=1&hide_gdpr_banner=1"});return false;
  }

  return (
    <div className="min-h-screen">
      <Head>
        <title>SignUp | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <motion.section
        className=""
        exit="exit"
        variants={pageAnimation}
        initial="hidden"
        animate="show"
      >
        <div className="flex flex-col lg:flex-row md:min-h-screen bg-section-gradient">
          <div className="min-h-screen order-2 md:order-1 lg:w-2/5 bg-white p-5 flex flex-col justify-between lg:rounded-r-4xl">
            <div>
              <MdKeyboardArrowLeft className="inline-block text-xl" />
              <Link href="/">
                <a className="text-sm font-semibold text-site-dark">
                  Back To Home
                </a>
              </Link>
            </div>
            <div className="flex flex-col justify-evenly mt-16 lg:mt-12">
              <div>
                <h1 className="text-4xl md:text-5xl font-medium text-center text-site-dark">
                  Create Account
                </h1>
              </div>
              <form
                className="space-y-6 mx-auto w-full md:w-8/12 lg:w-10/12 2xl:w-7/12"
              >
                <input
                  type="hidden"
                  name="access_to_property"
                  value={tagData}
                />
                <div className="mt-5">
                  <div className="flex space-y-1 flex-col justify-center">
                    <label
                      className="text-gray-500 text-base"
                      htmlFor="email-address"
                    >
                      Email Address
                    </label>
                    <input
                      type="email"
                      id="email-address"
                      placeholder=""
                      name="email"
                      autoComplete="email"
                      required
                      className="bg-gray-100 border-gray-200 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-2 px-5 rounded-md"
                    />
                  </div>
                </div>
                <div className="mt-5">
                  <div className="flex space-y-1 flex-col justify-center">
                    <label
                      className="text-gray-500 text-base"
                      htmlFor="username"
                    >
                      Username
                    </label>
                    <input
                      type="text"
                      id="username"
                      placeholder=""
                      name="username"
                      autoComplete="username"
                      required
                      className="bg-gray-100 border-gray-200 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-2 px-5 rounded-md"
                    />
                  </div>
                </div>
                <div className="mt-5 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                  <div className="sm:col-span-3">
                    <label
                      htmlFor="password"
                      className="block text-gray-500 text-base"
                    >
                      First Name
                    </label>
                    <div className="mt-1">
                      <input
                        type="text"
                        name="firstName"
                        id="firstName"
                        className="block w-full bg-gray-100 border-gray-200 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-2 px-5 rounded-md"
                      />
                    </div>
                  </div>
                  <div className="sm:col-span-3">
                    <label
                      htmlFor="confirm_password"
                      className="block text-gray-500 text-base"
                    >
                      Last Name
                    </label>
                    <div className="mt-1">
                      <input
                        type="text"
                        name="lastName"
                        id="lastName"
                        required
                        className="block w-full bg-gray-100 border-gray-200 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-2 px-5 rounded-md"
                      />
                    </div>
                  </div>
                </div>
                <div className="mt-5 grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                  <div className="sm:col-span-3">
                    <label
                      htmlFor="password"
                      className="block text-gray-500 text-base"
                    >
                      Password
                    </label>
                    <div className="mt-1">
                      <input
                        type="password"
                        name="password"
                        id="password"
                        className="block w-full bg-gray-100 border-gray-200 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-2 px-5 rounded-md"
                      />
                    </div>
                  </div>
                  <div className="sm:col-span-3">
                    <label
                      htmlFor="confirm_password"
                      className="block text-gray-500 text-base"
                    >
                      Repeat Password
                    </label>
                    <div className="mt-1">
                      <input
                        type="password"
                        name="confirm_password"
                        id="confirm_password"
                        required
                        className="block w-full bg-gray-100 border-gray-200 focus:border-gray-300 focus:ring-0 font-light text-site-dark py-2 px-5 rounded-md"
                      />
                    </div>
                  </div>
                </div>
                <div className="mt-5">
                  <fieldset>
                    <div className="flex space-y-1 flex-col justify-center">
                      <button
                        type="button"
                        className="savesign-button group relative py-2 px-4 border border-site-darkgray text-xs font-medium rounded-md text-site-main focus:outline-none uppercase tracking-widest"
                        onClick={scheduleAppointmentHandler}>
                        <RiCalendar2Line className="text-site-main text-base inline-block mb-0.5 mr-1" />
                        Book a demo
                      </button>
                    </div>
                  </fieldset>
                </div>
                <div className="mt-5">
                  <fieldset>
                    <div className="flex space-y-1 flex-col justify-center">
                    {isLoading
                      ? (
                        <div className="flex justify-center py-2 px-4 border border-transparent bg-site-main text-xs font-medium rounded-md text-white focus:outline-none uppercase tracking-widest">
                        <StyledLoadingSpinner><div></div><div></div><div></div><div></div></StyledLoadingSpinner>
                        </div>
                      )
                      : (
                        <button
                          type="button"
                          className="savesign-button group relative py-2 px-4 border border-transparent bg-site-main text-xs font-medium rounded-md text-white focus:outline-none uppercase tracking-widest"
                          onClick={handleOnSubmit}
                        >
                          Proceed To Payment
                        </button>
                      )}
                    </div>
                  </fieldset>
                </div>
                {validationErrors.length > 0 && (
                  <div className="mt-3 md:px-12">
                    {validationErrors.map((error, idx) => (
                      <p key={idx} className="text-sm text-center text-site-main font-medium tracking-wide">{error}</p>
                    ))}
                  </div>
                )}
              </form>
              <div className="mt-3 md:px-12">
                <p className="text-sm text-center text-gray-400 tracking-wide">
                  Already have an account?
                  <Link href="/">
                    <a className="text-site-main font-medium tracking-wide">
                      &nbsp;Login
                    </a>
                  </Link>
                </p>
              </div>
            </div>

            <div className="mt-12 md:mt-12">
              <p className="text-center text-site-gray font-light text-opacity-60">
                {new Date().getFullYear()} &#169; HostShield
              </p>
            </div>
          </div>
          <div className="hidden lg:order-2 lg:w-3/5 bg-section-gradient lg:flex flex-col justify-center relative overflow-hidden  text-white p-5">
            <StyledTransparentShieldBg className="inline-block w-screen h-screen absolute top-0 opacity-20" />
            <Logo className="w-full h-32 mx-auto z-10" />
            <p className="text-center md:text-4xl font-medium mt-12 z-10">
              Legal protection, automated
            </p>
            {/*<p className="mt-6 opacity-75 text-center text-sm md:text-base font-light px-0 md:px-20 z-10">
              Convert your waiver into a digital smart waiver{" "}
              <br className="hidden md:block" /> and get more than just a
              signature.
            </p>*/}
          </div>
        </div>
      </motion.section>
    </div>
  );
}

const StyledTransparentShieldBg = styled(TransparentShieldBg)`
  left: -60%;
  @media (min-width: 1200px) {
    left: -80%;
  }
  @media (min-width: 1440px) {
    left: -84%;
  }
`;

const StyledLoadingSpinner = styled.div`
  display: inline-block;
  position: relative;
  height: 20px;
  width: 76px;

  div {
    position: absolute;
    top: 3.5px;
    width: 13px;
    height: 13px;
    border-radius: 50%;
    background: #fff;
    animation-timing-function: cubic-bezier(0, 1, 1, 0);
  }
  div:nth-child(1) {
    left: 8px;
    animation: lds-ellipsis1 0.6s infinite;
  }
  div:nth-child(2) {
    left: 8px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(3) {
    left: 32px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(4) {
    left: 56px;
    animation: lds-ellipsis3 0.6s infinite;
  }
  @keyframes lds-ellipsis1 {
    0% {
      transform: scale(0);
    }
    100% {
      transform: scale(1);
    }
  }
  @keyframes lds-ellipsis3 {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(0);
    }
  }
  @keyframes lds-ellipsis2 {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(24px, 0);
    }
  }
`;

const mapDispatchToProps = dispatch => ({
  storeUser: payload => dispatch({
    type: actionTypes.STORE_USER,
    payload
  })
});

export default connect(null, mapDispatchToProps)(SignUp);
