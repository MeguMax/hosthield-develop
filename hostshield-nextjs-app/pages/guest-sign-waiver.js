import React, { useEffect, useState } from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import ReactTooltip from 'react-tooltip';
import { useDispatch, useSelector } from "react-redux";
//Components
import SignWaiverModal from "../src/components/modal/sign-waiver-modal";
import { setSignWaiverModalIsOpen } from "../redux/actions/main";
//Logo
import Logo from "../src/components/header/logo";
//Styles
import styled from "styled-components";
//Animations
import { motion } from "framer-motion";
import { pageAnimation } from "../src/components/animation/index";
// React-PDF
import { Document, Page, pdfjs } from "react-pdf";
import { PUBLIC_API_KEY } from "./../utils";
pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;

export default function SignUp() {
  const dispatch = useDispatch();
  const { signModal } = useSelector((state) => state);
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const router = useRouter();
  const pdfPages = [];
  const [blobPDF, setBlobPDF] = useState(null);
  const [errorData, setErrorData] = useState();

  const [isLoading, setIsLoading] = useState(true);

  function onDocumentLoadSuccess({ numPages }) {
    setNumPages(numPages);
    setIsLoading(false);
  }
  const goToPrevPage = () => {
    if (pageNumber > 1) {
      setPageNumber(pageNumber - 1);
    }
  };
  const goToNextPage = () => {
    if (pageNumber < numPages) {
      setPageNumber(pageNumber + 1);
    }
  };
  useEffect(() => {
    if (router?.query?.id) {
      fetch(`${PUBLIC_API_KEY}/documents/empty?id=${router.query.id}`, {
        method: "GET",
      }).then((response) => {
        if (response.status == 404) {
          setBlobPDF(null);
          setErrorData("Document doesn't exists")
        } else {
          response.blob().then((data) => {
            setBlobPDF(data);
          });
        }
      });
    }
  }, [router]);

  return (
    <div className="min-h-screen">
      <Head>
        <title>Guest Sign | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <motion.div
        className="bg-site-body min-h-screen"
        exit="exit"
        variants={pageAnimation}
        initial="hidden"
        animate="show"
      >
        <div className="flex justify-center w-full h-20 bg-site-main">
          <Logo className="w-40" />
        </div>
        <div className="w-full ">
          <div className="flex flex-col mt-10 w-10/12 2xl:w-6/12 space-y-10 mx-auto ">
            {errorData ??(<h3 className="text-site-dark text-4xl font-semibold">
              {errorData}
            </h3>)}
            <StyledContainer className="">
              <StyledContent className="relative flex flex-col bg-white px-6 py-3 space-y-4">

                {blobPDF && (
                  <StyledCanvasParent>
                    <Document
                      file={blobPDF}
                      onLoadSuccess={onDocumentLoadSuccess}
                    >
                      {Array.apply(null, Array(numPages))
                        .map((x, i) => i + 1)
                        .map((pageNumber) => (
                          <Page pageNumber={pageNumber} key={pageNumber}/>
                        ))}
                      {/*<Page pageNumber={pageNumber} />*/}
                    </Document>
                  </StyledCanvasParent>
                )}
              </StyledContent>
              <div className="w-full bg-site-main rounded-b-lg">
              {isLoading ? (
                <div className="flex justify-center py-4 px-4 border border-transparent bg-site-main text-sm font-medium rounded-md text-white focus:outline-none uppercase tracking-widest">
                  <StyledLoadingSpinner>
                    <div></div>
                    <div></div>
                    <div></div>
                    <div></div>
                  </StyledLoadingSpinner>
                </div>
              ):(
                <button
                  data-for="tooltip-sign"
                  data-tip="Read the document (scroll) and press the SIGN WAIVER button."
                  className="savesign-button text-sm uppercase w-full py-4 tracking-widest text-white font-medium text-center"
                  type="button"
                  onClick={() =>
                    dispatch(setSignWaiverModalIsOpen(!signModal.isOpen))
                  }
                >
                  Sign Waiver
                </button>
              )}
              </div>
            </StyledContainer>
          </div>
        </div>
        <div className="w-full flex justify-center absolute bottom-5">
          <p className="text-center w-full text-site-gray font-light text-opacity-60">
            {new Date().getFullYear()} &#169; HostShield
          </p>
        </div>
      </motion.div>
      <ReactTooltip id="tooltip-sign" place="top" effect="solid" type="error" />
      <SignWaiverModal />
    </div>

  );
}

const Fader = styled.div`
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  text-align: center;
  margin: 0;
  padding: 30px 0;
  background-image: linear-gradient(to bottom, transparent, white);
`;
const StyledContainer = styled.div`
  .fade-in-section {
    opacity: 0;
    visibility: hidden;
    transition: opacity 2s ease;
    will-change: opacity;
  }
  .fade-in-section.is-visible {
    opacity: 1;
    transform: none;
    visibility: visible;
  }
`;
const StyledCanvasParent = styled.div`
  user-select: none;
  > div > div > canvas {
    margin: 0 auto;
  }
`;
const StyledContent = styled(motion.div)`
  box-shadow: 10px 0 90px 0 rgba(0, 0, 0, 0.05);
  max-height: calc(100vh - 350px);
  overflow-y: scroll;
  & > div {
    h4 {
      font-weight: 500;
    }
    p {
      font-weight: 300;
      color: #8a8a8a;
    }
  }
`;
const StyledLoadingSpinner = styled.div`
  display: inline-block;
  position: relative;
  height: 20px;
  width: 76px;

  div {
    position: absolute;
    top: 3.5px;
    width: 13px;
    height: 13px;
    border-radius: 50%;
    background: #fff;
    animation-timing-function: cubic-bezier(0, 1, 1, 0);
  }
  div:nth-child(1) {
    left: 8px;
    animation: lds-ellipsis1 0.6s infinite;
  }
  div:nth-child(2) {
    left: 8px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(3) {
    left: 32px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(4) {
    left: 56px;
    animation: lds-ellipsis3 0.6s infinite;
  }
  @keyframes lds-ellipsis1 {
    0% {
      transform: scale(0);
    }
    100% {
      transform: scale(1);
    }
  }
  @keyframes lds-ellipsis3 {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(0);
    }
  }
  @keyframes lds-ellipsis2 {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(24px, 0);
    }
  }
`;
