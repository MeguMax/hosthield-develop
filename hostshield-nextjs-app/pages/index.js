import { useState } from "react";
import Head from "next/head";
import Script from "next/script";
import Link from "next/link";
import { useRouter } from "next/router";
import { connect } from "react-redux";
import styled from "styled-components";
//Icons
import { MdKeyboardArrowLeft } from "react-icons/md";
//Logo
import Logo from "../src/components/header/logo";
//Backgrounds
import TransparentShieldBg from "../src/components/background/transparent-hostshield-bg";
//Animations
import { motion } from "framer-motion";
import { pageAnimation } from "../src/components/animation/index";
import * as actionTypes from "../redux/types";
import { PUBLIC_API_KEY } from "./../utils";

function Login(props) {
  const [checkme, setCheckMe] = useState(false);
  const router = useRouter();
  const [error, setError] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const handleOnSubmit = (event) => {
    event.preventDefault();
    const { target } = event;
    const email = target["1"].name === "email" ? target["1"].value : "";
    const password = target["2"].name === "password" ? target["2"].value : "";
    const rememberMe =
      target["3"].name === "remember-me" ? target["3"].checked : false;

    // send data to BE
    const url = `${PUBLIC_API_KEY}/login`;
    setIsLoading(true);
    fetch(url, {
      method: "POST",
      credentials: 'include',
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        username: email,
        password,
        // rememberMe
      }),
    })
      .then((response) => {
        // handle response: store user data
        response.json().then((data) => {
          const userData = data?.id ? data : {};
          props.storeUser({
            userData,
          });
          // persistense data: store user into localstorage
          const itemData = {
            value: userData,
            ...(rememberMe
              ? {
                  ttl: new Date().getTime() + 864000000,
                }
              : {
                  ttl: new Date().getTime() + 10800000,
                }), // set ttl to 10 days if rememberMe=true or to 3h by default
          };

          localStorage.setItem("user", JSON.stringify(itemData));
          console.log(itemData);
          // redirect to dashboard
          if (data.message == "stripe") {
            setIsLoading(false);
            router.push("/signup-payment");
          } else {
            if (data.status == "false") {
              setIsLoading(false);
              setError(true);
            } else {
              if (userData.role === "user") {
                setIsLoading(false);
                router.push(`/dashboard/${userData.role}/my-waiver`);
              } else {
                setIsLoading(false);
                router.push(`/dashboard/${userData.role}/`);
              }
            }
          }
        });
      })
      .catch((error) => {
        console.error(error);
        setError(true);
        setIsLoading(false);
      });
  };

  return (
    <div className="min-h-screen">
      <Head>
        <title>SignIn | HostShield</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <motion.section
        className=""
        exit="exit"
        variants={pageAnimation}
        initial="hidden"
        animate="show"
      >
        <div className="flex flex-col lg:flex-row md:min-h-screen bg-section-gradient">
          <div className="min-h-screen order-2 md:order-1 lg:w-2/5 bg-white p-5 flex flex-col justify-between lg:rounded-r-4xl">
            <div>
              <MdKeyboardArrowLeft className="inline-block text-lg" />
              <Link href="https://shieldmyrental.com">
                <a className="text-sm font-semibold text-site-dark">
                  Back To Home
                </a>
              </Link>
            </div>
            <div className="flex flex-col justify-evenly mt-12 md:mt-auto">
              <div>
                <h1 className="text-5xl font-bold text-center text-site-dark">
                  Sign in
                </h1>
              </div>
              <form
                className="space-y-6 mx-auto w-full md:w-8/12 lg:w-10/12 2xl:w-7/12"
                onSubmit={handleOnSubmit}
              >
                <input type="hidden" name="remember" value={checkme} />
                <div className="mt-5">
                  <div className="flex space-y-1 flex-col justify-center">
                    <label
                      className="text-gray-500 text-base"
                      htmlFor="email-address"
                    >
                      Username
                    </label>
                    <input
                      type="text"
                      id="email-address"
                      placeholder=""
                      name="email"
                      autoComplete="email"
                      required
                      className={`${
                        error
                          ? "bg-input-error ring-2 ring-offset-1 focus:ring-offset-1 focus:ring-2 focus:ring-site-main focus:outline-none focus:border-transparent focus:ring-opacity-50 ring-site-main ring-opacity-50 border-transparent"
                          : "bg-gray-100 border-gray-200 focus:border-gray-300"
                      }   focus:ring-0 text-site-dark py-2 px-5 rounded-md`}
                    />
                    {error && (
                      <label className="leading-none text-site-main text-xs font-normal">
                        Incorrect email address / username
                      </label>
                    )}
                  </div>
                </div>
                <div className="mt-5">
                  <div className="flex space-y-1 flex-col justify-center">
                    <label
                      className="text-gray-500 text-base"
                      htmlFor="password"
                    >
                      Password
                    </label>
                    <input
                      type="password"
                      id="password"
                      placeholder=""
                      name="password"
                      autoComplete="password"
                      required
                      className="bg-gray-100 border-gray-200 focus:border-gray-300 focus:ring-0 text-site-dark py-2 px-5 rounded-sm"
                    />
                  </div>
                </div>
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <input
                      id="remember-me"
                      name="remember-me"
                      type="checkbox"
                      className="h-4 w-4 text-site-main focus:ring-offset-0 focus:ring-0 border-gray-300 rounded"
                      onChange={() => setCheckMe(!checkme)}
                    />
                    <label
                      htmlFor="remember-me"
                      className="ml-2 block text-sm text-gray-400"
                    >
                      Remember me
                    </label>
                  </div>

                  <div className="text-sm">
                    <Link href="/forgot-password">
                      <a className="font-medium text-gray-600 hover:text-gray-600">
                        Forgot password?
                      </a>
                    </Link>
                  </div>
                </div>
                <div className="mt-5">
                  {isLoading ? (
                    <div className="flex justify-center items-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-site-main focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 uppercase tracking-widest">
                      <StyledLoadingSpinner>
                        <div></div>
                        <div></div>
                        <div></div>
                        <div></div>
                      </StyledLoadingSpinner>
                    </div>
                  ) : (
                    <button
                      type="submit"
                      className="savesign-button group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-site-main focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 uppercase tracking-widest"
                    >
                      Sign in
                    </button>
                  )}
                </div>
              </form>
              <div className="mt-3 md:px-12">
                <p className="text-sm text-center text-gray-400">
                  Don&rsquo;t have an account yet?
                  <Link href="/signup">
                    <a className="text-site-main">&nbsp;Create account</a>
                  </Link>
                </p>
              </div>
            </div>
            <div className="mt-12 md:mt-auto">
              <p className="text-center text-site-gray font-light text-opacity-60">
                {new Date().getFullYear()} &#169; HostShield
              </p>
            </div>
          </div>
          <div className="hidden lg:order-2 lg:w-3/5 bg-section-gradient lg:flex flex-col justify-center relative overflow-hidden  text-white p-5">
            <StyledLoginTransparentShieldBg className="inline-block w-screen h-screen absolute top-0 opacity-20" />
            <Logo className="w-full h-32 mx-auto z-10" />
            <p className="text-center md:text-4xl font-medium mt-12 z-10">
              Legal protection, automated
            </p>
            {/*<p className="mt-6 opacity-75 text-center text-sm md:text-base font-light px-0 md:px-20 z-10">
              Convert your waiver into a digital smart waiver{" "}
              <br className="hidden md:block" /> and get more than just a
              signature.
            </p>*/}
          </div>
        </div>
      </motion.section>
    </div>
  );
}

const StyledLoginTransparentShieldBg = styled(TransparentShieldBg)`
  left: -60%;
  @media (min-width: 1200px) {
    left: -80%;
  }
  @media (min-width: 1440px) {
    left: -84%;
  }
`;

const StyledLoadingSpinner = styled.div`
  display: inline-block;
  position: relative;
  height: 20px;
  width: 76px;

  div {
    position: absolute;
    top: 3.5px;
    width: 13px;
    height: 13px;
    border-radius: 50%;
    background: #fff;
    animation-timing-function: cubic-bezier(0, 1, 1, 0);
  }
  div:nth-child(1) {
    left: 8px;
    animation: lds-ellipsis1 0.6s infinite;
  }
  div:nth-child(2) {
    left: 8px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(3) {
    left: 32px;
    animation: lds-ellipsis2 0.6s infinite;
  }
  div:nth-child(4) {
    left: 56px;
    animation: lds-ellipsis3 0.6s infinite;
  }
  @keyframes lds-ellipsis1 {
    0% {
      transform: scale(0);
    }
    100% {
      transform: scale(1);
    }
  }
  @keyframes lds-ellipsis3 {
    0% {
      transform: scale(1);
    }
    100% {
      transform: scale(0);
    }
  }
  @keyframes lds-ellipsis2 {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(24px, 0);
    }
  }
`;

const mapDispatchToProps = (dispatch) => ({
  storeUser: (payload) =>
    dispatch({
      type: actionTypes.STORE_USER,
      payload,
    }),
});

export default connect(null, mapDispatchToProps)(Login);
